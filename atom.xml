<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://w0w0w0w.github.io</id>
    <title>jibin&apos;s blogs</title>
    <updated>2022-02-28T08:03:27.128Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://w0w0w0w.github.io"/>
    <link rel="self" href="https://w0w0w0w.github.io/atom.xml"/>
    <subtitle>All in papers, but nothing special. (*￣︶￣)</subtitle>
    <logo>https://w0w0w0w.github.io/images/avatar.png</logo>
    <icon>https://w0w0w0w.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, jibin&apos;s blogs</rights>
    <entry>
        <title type="html"><![CDATA[Introduction of pass in new pass managers]]></title>
        <id>https://w0w0w0w.github.io/post/introduction-to-pass-in-new-pass-managers/</id>
        <link href="https://w0w0w0w.github.io/post/introduction-to-pass-in-new-pass-managers/">
        </link>
        <updated>2022-02-27T06:51:50.000Z</updated>
        <summary type="html"><![CDATA[<p>While the new pass manager had been introduced since LLVM9(or 8), it is inevitable for us to create pass in the new way which although is struggling.(For me, legacy one works not bad and very simple.(๑•̀ㅂ•́)و✧<br>
But new PM come to us with pretty much benifits. For example, it provide new interface to make easy use of the imformation from anther analysis pass.😃<br>
I will introduce the new PM for the guys who have used the legacy PM.</p>
]]></summary>
        <content type="html"><![CDATA[<p>While the new pass manager had been introduced since LLVM9(or 8), it is inevitable for us to create pass in the new way which although is struggling.(For me, legacy one works not bad and very simple.(๑•̀ㅂ•́)و✧<br>
But new PM come to us with pretty much benifits. For example, it provide new interface to make easy use of the imformation from anther analysis pass.😃<br>
I will introduce the new PM for the guys who have used the legacy PM.</p>
<!-- more -->
<h2 id="i-just-want-to-make-new-thing-look-like-old-onehope-not-just-me-having-this-kind-of-idea">I just want to make new thing look like old one.(Hope not just me having this kind of idea.)</h2>
<ul>
<li>Pass Inherit from llvm::PassInfoMixin or llvm::AnalysisInfoMixin based on which kind of pass you writting. But if you don't need your AnalysisInfo beeing used by other pass or user(coder..), just choose PassInfoMixin which is good enough for most situation.</li>
<li>IF you choose PassInfoMixin, the function must need to be implemented is run. For example:<br>
<code>llvm::PreservedAnalyses run(llvm::Function &amp;Func,llvm::FunctionAnalysisManager &amp;FAM);</code></li>
<li>PreservedAnalyses(the return value of run) determine if pass manager should manage😅 the pipeline of pass again.<br>
For more and example, the llvm::PreservedAnalyses::none() or llvm::PreservedAnalyses::all(), are the default option for me.</li>
<li>The register of New PM commend coder use two function.</li>
</ul>
<pre><code>  llvm::PassPluginLibraryInfo get_yourpass_Info() {
  return {LLVM_PLUGIN_API_VERSION, &quot;yourpass_name&quot;, LLVM_VERSION_STRING,
          [](PassBuilder &amp;PB) {
            PB.registerPipelineParsingCallback(
                [](StringRef Name, ModulePassManager &amp;MPM,
                   ArrayRef&lt;PassBuilder::PipelineElement&gt;) {
                  if (Name == &quot;yourpass&quot;) {
                    MPM.addPass(yourpass());
                    return true;
                  }
                  return false;
                });
          }};
}
</code></pre>
<pre><code>extern &quot;C&quot; LLVM_ATTRIBUTE_WEAK ::llvm::PassPluginLibraryInfo
llvmGetPassPluginInfo() {
  return get_yourpass_Info();
}
</code></pre>
<p>IF you finished these all, you could move from legecy PM to New PM easily. But you almost lose all new amazing features provided from New PM.</p>
<h2 id="amazing-with-new-pm">Amazing with New PM</h2>
<p>----updating----</p>
<p>Referrence:</p>
<ol>
<li>https://blog.llvm.org/posts/2021-03-26-the-new-pass-manager</li>
<li>https://llvm.org/docs/NewPassManager.html</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://w0w0w0w.github.io/post/hello-gridea/</id>
        <link href="https://w0w0w0w.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>